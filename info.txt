СЛОИСТАЯ АРХИТЕКТУРА 

Она представляет собой следующую модель:

 ПРЕЗЕНТАЦИОННЫЙ СЛОЙ
         ↓
     БИЗНЕС СЛОЙ
         ↓
СЛОЙ РАБОТЫ С ДАННЫМИ
         ↓
   ИСТОЧНИК ДАННЫХ

    Презентационный слой - это та часть приложения, которая обрабатывает входящие
запросы и отправляет ответы. Этот слой знает какой статус ответа отдать. Этот слой
не должен смешиваться с кодом, который обрабатывает данные. Это необходимо для того,
чтобы потом в будущем можно было использовать вебСокет или прикрутить графQL.
    Этому слою не нужно знать как формируются данные для ответа, каким образом
они запрашиваются из БД. Он работает только с получением запросов, отправкой ответов
и взаимодействует с другими слоями для того, чтобы эти данные получать

    На данном этапе построения я объеденю Бизнес слой и Слой работы с данными, но 
отделю их от Презентационного слоя.

    Все созданные роуты и представляют в своей совокупности Презентационный слой.

    На данном этапе я достану из них логику по общению с БД и перенесу ее на другой
слой (БИЗНЕС СЛОЙ и СЛОЙ РАБОТЫ С ДАННЫМИ - они пока будут объеденены)

    Поместим данный слой в папку services. Реализуем этот слой через dependency injection.
Схема такая: при создании приложения в качестве аргументов передаем:
  client: MongoClient,
  mongoDbName: string,
и инжектим их в классы создания сервисов, которые предоставляют методы для работы с БД 